# MDL file for Synth-A-Modeler
#
# Edgar Berdahl, 2012
# Audio Communication Group
# Technical University of Berlin
#
# -------------------------------------------------------------------
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



port(),dev0,(); # pos 869,78
port(),dev1,(); # pos 817,371


pluck(k*1.0,R*1.0,maxdisp*1.0,0.025*moveStrings),p0,junct0,dev0,();
pluck(k*1.0,R*1.0,maxdisp*1.0,0.015*moveStrings),p1,junct0cpy2,dev0,();
pluck(k*1.0,R*1.0,maxdisp*1.0,0.005*moveStrings),p2,junct0cpy3,dev0,();
pluck(k*1.0,R*1.0,maxdisp*1.0,-0.005*moveStrings),p3,junct0cpy4,dev0,();
pluck(k*1.0,R*1.0,maxdisp*1.0,-0.015*moveStrings),p4,junct0cpy5,dev0,();
pluck(k*1.0,R*1.0,maxdisp*1.0,-0.025*moveStrings),p5,junct0cpy6,dev0,();


waveguide(2.5,simpleString(0.017,0.017*frequencyScaler1)),wg0,term0,junct0,();
waveguide(2.5,simpleString(0.017,0.017*frequencyScaler2)),wg0cpy2,term0cpy2,junct0cpy2,();
waveguide(2.5,simpleString(0.017,0.017*frequencyScaler3)),wg0cpy3,term0cpy3,junct0cpy3,();
waveguide(2.5,simpleString(0.017,0.017*frequencyScaler4)),wg0cpy4,term0cpy4,junct0cpy4,();
waveguide(2.5,simpleString(0.017,0.017*frequencyScaler5)),wg0cpy5,term0cpy5,junct0cpy5,();
waveguide(2.5,simpleString(0.017,0.017*frequencyScaler6)),wg0cpy6,term0cpy6,junct0cpy6,();


termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0,(); # pos 100,210
termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0cpy2,(); # pos 190,220
termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0cpy3,(); # pos 270,220
termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0cpy4,(); # pos 350,220
termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0cpy5,(); # pos 450,220
termination(simpleStringTerm(-1.0*dampingTerm, 5000.0)),term0cpy6,(); # pos 550,220


junction(0.0),junct0,(); # pos 313,156
junction(0.0),junct0cpy2,(); # pos 403,166
junction(0.0),junct0cpy3,(); # pos 483,166
junction(0.0),junct0cpy4,(); # pos 563,166
junction(0.0),junct0cpy5,(); # pos 663,166
junction(0.0),junct0cpy6,(); # pos 763,166


faustcode: frequencyScaler1=hslider("Waveguide freq. scaler 1", 0.8, 0.1, 1.0, 0.01);
faustcode: frequencyScaler2=hslider("Waveguide freq. scaler 2", 0.8, 0.1, 1.0, 0.01);
faustcode: frequencyScaler3=hslider("Waveguide freq. scaler 3", 0.8, 0.1, 1.0, 0.01);
faustcode: frequencyScaler4=hslider("Waveguide freq. scaler 4", 0.8, 0.1, 1.0, 0.01);
faustcode: frequencyScaler5=hslider("Waveguide freq. scaler 5", 0.8, 0.1, 1.0, 0.01);
faustcode: frequencyScaler6=hslider("Waveguide freq. scaler 6", 0.8, 0.1, 1.0, 0.01);
faustcode: k=hslider("Pluck stiffness [N/m]",250.0,50.0,1000.0,50.0);
faustcode: R=hslider("Pluck damping [N/(m/s)]",0.1,0.0,0.5,0.01);
faustcode: maxdisp=hslider("Pluck half-width [m]",0.006,0.001,0.01,0.001);
faustcode: dampingTerm=hslider("Termination damping",0.996,0.9,0.999,0.0001);
faustcode: moveStrings=hslider("Waveguides position adjustment",1.0,0.1,1.4,0.01);
faustcode: vol=hslider("Z Volume",0.3,0.01,1.0,0.01);


audioout,a0,term0*vol*1.0+term0cpy2*vol*1.0+term0cpy4*vol*1.0; # pos 117,334
audioout,a1,term0cpy6*vol*1.0+term0cpy3*vol*1.0+term0cpy5*vol*1.0; # pos 572,327
